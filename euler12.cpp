// Project Euler: problem 12
//
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?


#include <iostream>
#include <cmath>

using namespace std;

int main()
{
	int triangleNumber = 0;
	int n = 500;

	for (int i = 1; ; ++i)
	{
		triangleNumber += i;
		int numOfDivisors = 0;
		int root = sqrt(triangleNumber);

		for (int div = 1; div <= root; ++div)
			if (triangleNumber % div == 0)
				numOfDivisors+= 2;

		if (root * root == triangleNumber)
			--numOfDivisors;

		if (numOfDivisors > n)
			break;
	}

	cout << triangleNumber << endl;

	return 0;
}
